math ja dir
# dir palauttaa listan moduulin sisältämistä metodeista
import math
print(dir(math))
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'cbrt', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'exp2', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']

random
import random
print(dir(random))
['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', '_ONE', '_Sequence', '_Set', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_accumulate', '_acos', '_bisect', '_ceil', '_cos', '_e', '_exp', '_floor', '_index', '_inst', '_isfinite', '_log', '_os', '_pi', '_random', '_repeat', '_sha512', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'choices', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'lognormvariate', 'normalvariate', 'paretovariate', 'randbytes', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate']

randint
from random import randint
# satunnaisia kokonaislukuja
print("Nopan luku:", randint(1,6))
Nopan luku: 1
in range()
# tietty määrä satunnaisia kokonaislukuja
from random import randint
for i in range(10):             #arvotaan 10 eri lukua
    print("Nopan luku:", randint(1,6))
Nopan luku: 2
Nopan luku: 5
Nopan luku: 4

shuffle
# sekoittaa satunnaisjärjestykseen
from random import shuffle
sanat = ["apina", "banaani", "cembalo"]
shuffle(sanat)
print(sanat)
['banaani', 'cembalo', 'apina']

sample
# satunnaisesti poimii määrätyn määrän
from random import sample
numerot = list(range(1,41))
lottorivi = sample(numerot, 7)
print(lottorivi)
[37, 13, 33, 21, 12, 23, 38]

choice
# satunnainen valinta
from random import choice
sanat = ["apina", "banaani", "cembalo"]
print(choice(sanat))
banaani

seed
# siemenarvo annettu, niin saa satunnaisuudesta huolimatta saman luvun riippuen seed-arvosta
# jos ei seed-arvoa, käyttää tietokoneen omaa aikaa seed-arvona
from random import randint, seed
print(seed(1537))
print(randint(1,100))
None
45

# heitä noppaa satunnaisesti muutaman kerran ja saa aina sama tulos
import random
noppa = [1, 2, 3, 4, 5, 6]
print("Valitsee satunnaisesti noppaluvun:")
for i in range(3):
    random.seed(25)
    print(random.choice(noppa))
Valitsee satunnaisesti noppaluvun:
4
4
4

datetime
from datetime import datetime
aikaNyt = datetime.now()
print(aikaNyt)

#luettavampaan muotoon
print(aikaNyt.strftime("%d.%m.%Y"))
2024-02-28 00:56:08.375874
28.02.2024
%d päivä (01-31)
%m kk(1-12)
%Y vuosi 4 numeroa
%H tunnit 24h
%M minuutit (0-59)
%S sekunnit
enemmän : https://www.w3schools.com/python/python_datetime.asp

# ajan voi määrittää itse
from datetime import datetime
aika = datetime(202, 3,31, 10,53)
print(aika)
0202-03-31 10:53:00

# laskee päiviä ja esim sekuntteja, ei vuosia
from datetime import datetime
nyt = datetime.now()
juhannus = datetime(2023, 6,23)
if nyt < juhannus:
    print('Ei ole vielä juhannus')
elif nyt == juhannus:
    print('Hyvää juhannusta!')
elif nyt > juhannus:
    print('juhannus on mennyt')
erotus = juhannus - nyt
print('juhannukseen on vielä', erotus.days, 'päivää')
juhannus on mennyt
juhannukseen on vielä -251 päivää

# syotteen muuttaminen datetimeksi
from datetime import datetime
#syote = input('Anna syntymäpäiväsi muodossa pv.kk.vvvv:')
syote = '12.10.1495'
aika = datetime.strptime(syote, '%d.%m.%Y')
if aika < datetime(2000,1,1):
    print('synnyit viime vuosituhannella')
else: 
    print('synnyit tällä vuosituhannella')
synnyit viime vuosituhannella

#kuinka monta päivää
#timedelta kuvastaa kestoa kahden aikaolion välillä
#timedeltan avulla voi lisätä tai vähentää aikaa
from datetime import datetime, timedelta
annettu_pvm = datetime(2023,3,31)  # aina 00:00
print(annettu_pvm)
vahennettavat_paivat = 7
uusi_pvm = annettu_pvm - timedelta(days=vahennettavat_paivat, hours=2)
print(uusi_pvm)
2023-03-31 00:00:00
2023-03-23 22:00:00

# päivän muuttaminen viikonpäiväksi
from datetime import datetime
pvm = datetime(2023,3, 31)
print(pvm.strftime('%A'))  #ottaa parametrin, format, osoittaa missä muodossa merkkijono palautetaan

# teht kokeile mitä A:n muuttaminen B:ksi tai C:ksi tekee 
print(pvm.today().weekday())
Friday
2

# JSON (lyhenne sanoista JavaScript Object Notation) on yksinkertainen avoimen standardin tiedostomuoto tiedonvälitykseen
# https://fi.wikipedia.org/wiki/JSON
import json
with open('kurssit.json') as tiedosto:
    data = tiedosto.read()
kurssit = json.loads(data)  # loads() muuttaa json-stringin sanakirja-olioksi
print(kurssit)
print(type(kurssit))

#yhden tiedon hakeminen kaikista alkioista avaimen perusteella
for kurssi in kurssit:
    print(kurssi['nimi'])
[{'nimi': 'Ohjelmoinnin perusteet', 'tunnus': 'Ohpe', 'periodit': [1, 3]}, {'nimi': 'Ohjelmoinnin jatkokurssi', 'tunnus': 'Ohja', 'periodit': [2, 4]}, {'nimi': 'Tietokantasovellus', 'tunnus': 'Tsoha', 'periodit': [1, 2, 3, 4]}]
<class 'list'>
Ohjelmoinnin perusteet
Ohjelmoinnin jatkokurssi
Tietokantasovellus
dumps

# dictionary json-tiedostoksi
import json
henkilot = {
    "pekka": ['040-5466745', '09-22223333'],
    'emilia': ['045-1212344'],
    'maija': '04000000',
    'matti': '12154545'
}
print(henkilot)
#json-tiedoston luominen
json_henkilot = json.dumps(henkilot) # dumps muuttaa dictionaryn olion json-stringiksi.
print(json_henkilot)
{'pekka': ['040-5466745', '09-22223333'], 'emilia': ['045-1212344'], 'maija': '04000000', 'matti': '12154545'}
{"pekka": ["040-5466745", "09-22223333"], "emilia": ["045-1212344"], "maija": "04000000", "matti": "12154545"}


# hakee nettisivun tiedot
import urllib.request
oma_pyynto = urllib.request.urlopen('https://studies.cs.helsinki.fi/stats-mock/api/courses/docker2019/stats')
print(oma_pyynto.read())
b'{"0":{"students":220,"hour_total":286,"exercise_total":218,"hours":[null,176,11,3,1,1,null,null,6]},"1":{"students":176,"hour_total":2421,"exercise_total":2748,"hours":[null,6,3,3,4,9,5,8,13,4,28,1,14,2,3,20,2,4,3,null,15,1,1,null,6,5,null,1,2,null,8,null,null,null,null,1,null,null,null,null,2,2]},"2":{"students":143,"hour_total":1862,"exercise_total":1343,"hours":[null,1,1,5,5,8,8,3,10,7,21,1,11,6,1,11,7,2,4,null,10,null,null,null,4,3,1,null,null,null,3,2,null,null,null,5]},"3":{"students":99,"hour_total":1397,"exercise_total":679,"hours":[null,1,2,1,2,4,7,5,10,1,17,1,3,3,5,7,2,1,1,null,8,null,1,null,3,3,1,null,null,null,1,null,1,null,null,8]}}'

# # https://thl.fi/fi/tilastot-ja-data/aineistot-ja-palvelut/avoin-data/varmistetut-koronatapaukset-suomessa-covid-19-
# import urllib.request
# #url = "https://sampo.thl.fi/pivot/prod/fi/epirapo/covid19case/fact_epirapo_covid19case.json"
# def getResponse(url):
#     operUrl = urllib.request.urlopen(url)
#     if(operUrl.getcode()==200):
#        data = operUrl.read()
#     else:
#        print("Error receiving data", operUrl.getcode()) # kokeile minkä virheen antaa
#     return data
# print(type(getResponse(url)))
# #decode muuttaa stringiksi
# print(getResponse(url).decode("utf-8").strip() )
#  jos haettava tieto on html muodossa, tuo html-tagit  mukana

#oma_pyynto = urllib.request.urlopen('https://www.taitotalo.fi/')
#print(oma_pyynto.read().decode('utf8').strip())
# BeautifulSoupin avulla on mahdollista muotoilla hakua
#https://pypi.org/project/requests/
#pip install requests
# pip install bs4
import requests
from bs4 import BeautifulSoup
url = "https://taitotalo.fi"
req = requests.get(url)
soup = BeautifulSoup(req.text, "html.parser")
#print(soup.prettify())

for i in soup.findAll('p'): # kokeile p tai h2
    print(i.text.replace("\n", " ").strip())
